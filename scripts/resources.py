#!/usr/bin/python2
#from azure.common.client_factory import get_client_from_cli_profile
#from azure.mgmt.compute import ComputeManagementClient
#from azure.mgmt.resource import ResourceManagementClient
import subprocess
import requests
import adal
import os
import json
import sys
import glob
import argparse

scwd=os.getcwd()
print scwd
head, tail = os.path.split(scwd)
os.chdir(head)
cwd=os.getcwd()
head, tail = os.path.split(cwd)
newd=head+"/scripts"
os.chdir(newd)
print os.getcwd()

import azurerm_resources
import azurerm_resource_group
import azurerm_management_lock
import azurerm_user_assigned_identity
import azurerm_availability_set
import azurerm_route_table
import azurerm_application_security_group
import azurerm_network_security_group
import azurerm_virtual_network
import azurerm_subnet
import azurerm_virtual_network_peering
import azurerm_managed_disk
import azurerm_storage_account
import azurerm_public_ip
import azurerm_key_vault

os.chdir(scwd)
print os.getcwd()


parser = argparse.ArgumentParser(description='terraform sub rg')
parser.add_argument('-s', help='Subscription Id')
parser.add_argument('-g', help='Resource Group')
parser.add_argument('-r', help='Filter azurerm resource')
parser.add_argument('-d', help='Debug')
args = parser.parse_args()
csub=args.s
crg=args.g
crf=args.r
deb=args.d
cde=False
az2tfmess="# File generated by az2tf see: https://github.com/andyt530/az2tf \n"


if csub is not None:
    print("sub=" + csub) 
    # validate sub
if crg is not None:
    print("resource group=" + crg)
    # validate rg
if crf is not None:
    print("resource filter=" + crf)
    # validate rg
if deb is not None:
    cde=True

if sys.version_info[0] > 2:
    #raise Exception("Must be using Python 2")
    print("Python version ", sys.version_info[0], " version 2 required, Exiting")
    exit()

def printf(format, *values):
    print(format % values )

#with open(filename, 'w') as f:
    #print >> f, 'Filename:'


#tenant = os.environ['TENANT']
#authority_url = 'https://login.microsoftonline.com/' + tenant
#client_id = os.environ['CLIENTID']
#client_secret = os.environ['CLIENTSECRET']
#resource = 'https://management.azure.com/'
#context = adal.AuthenticationContext(authority_url)
#token = context.acquire_token_with_client_credentials(resource, client_id, client_secret)
#headers = {'Authorization': 'Bearer ' + token['accessToken'], 'Content-Type': 'application/json'}
#params = {'api-version': '2016-06-01'}
#url = 'https://management.azure.com/' + 'subscriptions'
#r = requests.get(url, headers=headers, params=params)
#print(json.dumps(r.json(), indent=4, separators=(',', ': ')))
print "Access Token"
p = subprocess.Popen('az account get-access-token -o json', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
c=0
for line in p.stdout.readlines():
    if "accessToken" in line:
        tk=line.split(":")[1].strip(' ",')
        tk2=tk.replace(",", "")
        bt2=tk2.replace('"', '')
    if "subscription" in line:
        tk=line.split(":")[1].strip(' ",')
        tk2=tk.replace(",", "")
        sub2=tk2.replace('"', '')
retval = p.wait()
if csub is not None:
    sub=csub
else:
    sub=sub2.rstrip('\n')

bt=bt2.rstrip('\n')
print "Subscription:",sub
headers = {'Authorization': 'Bearer ' + bt, 'Content-Type': 'application/json'}


# subscription check
#https://management.azure.com/subscriptions?api-version=2014-04-01
print "REST Subscriptions ",
url="https://management.azure.com/subscriptions"
params = {'api-version': '2014-04-01'}
try: 
    r = requests.get(url, headers=headers, params=params)
    subs= r.json()["value"]
except KeyError:
    print "Error getting subscription list"
    exit("ErrorGettingSubscriptionList")
ssubs=json.dumps(subs)
if sub not in ssubs: 
    print "Could not find subscription with ID (Test 1) " + sub + " Exiting ..." 
    exit("ErrorInvalidSubscriptionID-1")

FoundSub=False
count=len(sub)
print count
for i in range(0, count):
    id=str(subs[i]["subscriptionId"])
    #print id + " " + sub
    if id == sub:
        FoundSub=True

if not FoundSub:
    print "Could not find subscription with ID (Test 2) " + sub + " Exiting ..." 
    #exit("ErrorInvalidSubscriptionID-2")


print "Found subscription " + sub + " proceeding ..."

if crg is not None:
    FoundRg=False
    # get and check Resource group
    url="https://management.azure.com/subscriptions/" + sub + "/resourceGroups"
    params = {'api-version': '2014-04-01'}
    r = requests.get(url, headers=headers, params=params)
    rgs= r.json()["value"]

    count=len(rgs)
    for j in range(0, count):    
        name=rgs[j]["name"]
        if crg.lower() == name.lower():
            print "Found Resource Group" + crg
            FoundRg=True

    if not FoundRg:
        print "Could not find Resource Group " + crg + " in subscription " + sub + " Exiting ..." 
        exit("ErrorInvalidResourceGroup")


if os.path.exists("tf-staterm.sh"):
    os.remove('tf-staterm.sh')
if os.path.exists("tf-stateimp.sh"):
    os.remove('tf-stateimp.sh')

if crf is None:
    crf="azurerm"



azurerm_resources.azurerm_resources(crf,cde,crg,headers,requests,sub,json,az2tfmess)
azurerm_resource_group.azurerm_resource_group(crf,cde,crg,headers,requests,sub,json,az2tfmess)
# 002 management locks
azurerm_management_lock.azurerm_management_lock(crf,cde,crg,headers,requests,sub,json,az2tfmess,subprocess)
# 015 user assigned identity
azurerm_user_assigned_identity.azurerm_user_assigned_identity(crf,cde,crg,headers,requests,sub,json,az2tfmess,subprocess)
#  020 Avail Sets
azurerm_availability_set.azurerm_availability_set(crf,cde,crg,headers,requests,sub,json,az2tfmess)
#  030 Route Table
azurerm_route_table.azurerm_route_table(crf,cde,crg,headers,requests,sub,json,az2tfmess)
# 040 ASG
azurerm_application_security_group.azurerm_application_security_group(crf,cde,crg,headers,requests,sub,json,az2tfmess)
#  050 NSG's
azurerm_network_security_group.azurerm_network_security_group(crf,cde,crg,headers,requests,sub,json,az2tfmess)
#  060 Virtual Networks
azr=azurerm_virtual_network.azurerm_virtual_network(crf,cde,crg,headers,requests,sub,json,az2tfmess)
#  070 subnets
azurerm_subnet.azurerm_subnet(crf,cde,crg,headers,requests,sub,json,az2tfmess,azr)
#  080 vnet peering
azurerm_virtual_network_peering.azurerm_virtual_network_peering(crf,cde,crg,headers,requests,sub,json,az2tfmess,azr)
# 090 Key Vault - using cli
azurerm_key_vault.azurerm_key_vault(crf,cde,crg,headers,requests,sub,json,az2tfmess,subprocess)
# 100 managed disk
azurerm_managed_disk.azurerm_managed_disk(crf,cde,crg,headers,requests,sub,json,az2tfmess)
#110 storgae account
azurerm_storage_account.azurerm_storage_account(crf,cde,crg,headers,requests,sub,json,az2tfmess)
#120 public ip
azurerm_public_ip.azurerm_public_ip(crf,cde,crg,headers,requests,sub,json,az2tfmess)



#  124 Traffic manager profile

tfp="azurerm_traffic_manager_profile"
azr=""
if crf in tfp:
# REST or cli
    print "REST Traffic Manager Profile"
    url="https://management.azure.com/subscriptions/" + sub + "/providers/Microsoft.Network/trafficmanagerprofiles"
    params = {'api-version': '2017-05-01'}
    r = requests.get(url, headers=headers, params=params)
    azr= r.json()["value"]
    if cde:
        print(json.dumps(azr, indent=4, separators=(',', ': ')))

    tfrmf="124-"+tfp+"-staterm.sh"
    tfimf="124-"+tfp+"-stateimp.sh"
    tfrm=open(tfrmf, 'a')
    tfim=open(tfimf, 'a')
    print tfp,
    count=len(azr)
    print count
    for i in range(0, count):

        name=azr[i]["name"]
        #loc=azr[i]["location"]
        id=azr[i]["id"]
        rg=id.split("/")[4].replace(".","-")

        if crg is not None:
            if rg.lower() != crg.lower():
                continue  # back to for
        
        rname=name.replace(".","-")
        prefix=tfp+"."+rg+'__'+rname
        #print prefix
        rfilename=prefix+".tf"
        fr=open(rfilename, 'w')
        fr.write(az2tfmess)
        fr.write('resource ' + tfp + ' ' + rg + '__' + rname + ' {\n')
        fr.write('\t name = "' + name + '"\n')
        #fr.write('\t location = "'+ loc + '"\n')
        fr.write('\t resource_group_name = "'+ rg + '"\n')

        trm=azr[i]["properties"]["trafficRoutingMethod"]
        fr.write('\t traffic_routing_method = "' +  trm + '"\n')
        ps=azr[i]["properties"]["profileStatus"]
        fr.write('\t profile_status = "' + ps + '"\n') 
      
        dnsc=azr[i]["properties"]["dnsConfig"]
        monc=azr[i]["properties"]["monitorConfig"]
                

# dns_config block

        rn=azr[i]["properties"]["dnsConfig"]["relativeName"]
        ttl=azr[i]["properties"]["dnsConfig"]["ttl"]
        
        if ttl == 0: 
            ttl=30
        
        fr.write('\t dns_config { \n')
        fr.write('\t\t relative_name = "' + rn + '"\n')
        #TF bug returning 0
        fr.write('\t\t ttl  = "' + str(ttl) + '"\n')
        fr.write('\t} \n')
        
# monitor_config block

        prot=azr[i]["properties"]["monitorConfig"]["protocol"]
        port=azr[i]["properties"]["monitorConfig"]["port"]

        fr.write('\t monitor_config { \n')
        fr.write('\t\t protocol = "' + prot + '"\n')
        fr.write('\t\t port  = "' + str(port) + '"\n')
        try:
            path=azr[i]["properties"]["monitorConfig"]["path"]
            fr.write('\t\t path  = "' + path + '"\n')
        except KeyError:
            pass
        fr.write('\t} \n')  
        


# tags block       
        try:
            mtags=azr[i]["tags"]
            fr.write('tags { \n')
            for key in mtags.keys():
                tval=mtags[key]
                fr.write('\t "' + key + '"="' + tval + '"\n')
            fr.write('}\n')
        except KeyError:
            pass

        fr.write('}\n') 
        fr.close()   # close .tf file

        if cde:
            with open(rfilename) as f: 
                print f.read()

        tfrm.write('terraform state rm '+tfp+'.'+rg+'__'+rname + '\n')

        tfim.write('echo "importing ' + str(i) + ' of ' + str(count-1) + '"' + '\n')
        tfcomm='terraform import '+tfp+'.'+rg+'__'+rname+' '+id+'\n'
        tfim.write(tfcomm)  

    # end for i loop

    tfrm.close()
    tfim.close()
#end traffic manager profile

#  125 traffic manager endpoint

tfp="azurerm_traffic_manager_endpoint"

if crf in tfp:
# REST or cli
# from above
    
    tfrmf="125-"+tfp+"-staterm.sh"
    tfimf="125-"+tfp+"-stateimp.sh"
    tfrm=open(tfrmf, 'a')
    tfim=open(tfimf, 'a')
    print tfp,
    count=len(azr)
    print count
    for i in range(0, count):

        #loc=azr[i]["location"]
        id=azr[i]["id"]
        pname=azr[i]["name"]
        azr2=azr[i]["properties"]["endpoints"]
        jcount=len(azr2)
        print "jcount=" + str(jcount)
        for j in range (0,jcount):

            name=azr2[j]["name"]
            id=azr2[j]["id"]
            rg=id.split("/")[4].replace(".","-")
            print rg
            print crg
            if crg is not None:
                if rg.lower() != crg.lower():
                    continue  # back to for
            
            rname=name.replace(".","-")
            prefix=tfp+"."+rg+'__'+rname
            print prefix
            rfilename=prefix+".tf"
            fr=open(rfilename, 'w')
            fr.write(az2tfmess)
            fr.write('resource ' + tfp + ' ' + rg + '__' + rname + ' {\n')
            fr.write('\t name = "' + name + '"\n')
            #fr.write('\t location = "'+ loc + '"\n')
            fr.write('\t resource_group_name = "'+ rg + '"\n')
            fr.write('\t profile_name = "' +  pname + '"\n')
            ttype=azr2[j]["type"].split("/")[2]
            fr.write('\t type = "' +  ttype + '"\n')
            print "hi2"
            pri=azr2[j]["properties"]["priority"]
            fr.write('\t priority = "' +  str(pri) + '"\n')
            wt=azr2[j]["properties"]["weight"]
            fr.write('\t weight = "' +  str(wt) + '"\n')

            tgt=azr2[j]["properties"]["target"]
            fr.write('\t target = "' +  tgt + '"\n')
            eps=azr2[j]["properties"]["endpointStatus"]
            fr.write('\t endpoint_status = "' +  eps + '"\n')
            try:
                tgtid=azr2[j]["properties"]["targetResourceId"]
                tgtrrg=azr2[j]["properties"]["targetResourceId"].split("/")[4].replace(".","-")
                tgtrid=azr2[j]["properties"]["targetResourceId"].split("/")[8].replace(".","-")          
                fr.write('\t target_resource_id = "${azurerm_public_ip.' + tgtrrg + '__' + tgtrid + '.id}"\n')
            except KeyError:
                pass


            fr.write('}\n') 
            fr.close()   # close .tf file

            if cde:
                with open(rfilename) as f: 
                    print f.read()

            tfrm.write('terraform state rm '+tfp+'.'+rg+'__'+rname + '\n')

            tfim.write('echo "importing ' + str(i) + ' of ' + str(count-1) + '"' + '\n')
            tfcomm='terraform import '+tfp+'.'+rg+'__'+rname+' '+id+'\n'
            tfim.write(tfcomm)  
        # end for j loop

    # end for i loop

    tfrm.close()
    tfim.close()
#end traffic manager endpoint

# ******************************************************************************************
exit()

#rclient = get_client_from_cli_profile(ResourceManagementClient)
#for resource_group in rclient.resource_groups.list():
#    print(resource_group.name)

# template

#############


