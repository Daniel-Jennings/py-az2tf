#!/usr/bin/python2

import subprocess
import requests
import adal
import os
import json
import sys
import glob
import argparse

scwd=os.getcwd()
#print scwd
head, tail = os.path.split(scwd)
os.chdir(head)
cwd=os.getcwd()
head, tail = os.path.split(cwd)
newd=head+"/scripts"
os.chdir(newd)
#print os.getcwd()

import azurerm_resources
import azurerm_resource_group
import azurerm_management_lock
import azurerm_user_assigned_identity
import azurerm_availability_set
import azurerm_route_table
import azurerm_application_security_group
import azurerm_network_security_group
import azurerm_virtual_network
import azurerm_subnet
import azurerm_virtual_network_peering
import azurerm_managed_disk
import azurerm_storage_account
import azurerm_public_ip
import azurerm_key_vault
import azurerm_traffic_manager_profile
import azurerm_traffic_manager_endpoint
import azurerm_network_interface

os.chdir(scwd)
#print os.getcwd()


parser = argparse.ArgumentParser(description='terraform sub rg')
parser.add_argument('-s', help='Subscription Id')
parser.add_argument('-g', help='Resource Group')
parser.add_argument('-r', help='Filter azurerm resource')
parser.add_argument('-d', help='Debug')
args = parser.parse_args()
csub=args.s
crg=args.g
crf=args.r
deb=args.d
cde=False
az2tfmess="# File generated by az2tf see: https://github.com/andyt530/az2tf \n"


if csub is not None:
    print("sub=" + csub) 
    # validate sub
if crg is not None:
    print("resource group=" + crg)
    # validate rg
if crf is not None:
    print("resource filter=" + crf)
    # validate rg
if deb is not None:
    cde=True

if sys.version_info[0] > 2:
    #raise Exception("Must be using Python 2")
    print("Python version ", sys.version_info[0], " version 2 required, Exiting")
    exit()

def printf(format, *values):
    print(format % values )

#with open(filename, 'w') as f:
    #print >> f, 'Filename:'


#tenant = os.environ['TENANT']
#authority_url = 'https://login.microsoftonline.com/' + tenant
#client_id = os.environ['CLIENTID']
#client_secret = os.environ['CLIENTSECRET']
#resource = 'https://management.azure.com/'
#context = adal.AuthenticationContext(authority_url)
#token = context.acquire_token_with_client_credentials(resource, client_id, client_secret)
#headers = {'Authorization': 'Bearer ' + token['accessToken'], 'Content-Type': 'application/json'}
#params = {'api-version': '2016-06-01'}
#url = 'https://management.azure.com/' + 'subscriptions'
#r = requests.get(url, headers=headers, params=params)
#print(json.dumps(r.json(), indent=4, separators=(',', ': ')))
print "Access Token"
p = subprocess.Popen('az account get-access-token -o json', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
c=0
for line in p.stdout.readlines():
    if "accessToken" in line:
        tk=line.split(":")[1].strip(' ",')
        tk2=tk.replace(",", "")
        bt2=tk2.replace('"', '')
    if "subscription" in line:
        tk=line.split(":")[1].strip(' ",')
        tk2=tk.replace(",", "")
        sub2=tk2.replace('"', '')
retval = p.wait()
if csub is not None:
    sub=csub
else:
    sub=sub2.rstrip('\n')

bt=bt2.rstrip('\n')
print "Subscription:",sub
headers = {'Authorization': 'Bearer ' + bt, 'Content-Type': 'application/json'}


# subscription check
#https://management.azure.com/subscriptions?api-version=2014-04-01
print "REST Subscriptions ",
url="https://management.azure.com/subscriptions"
params = {'api-version': '2014-04-01'}
try: 
    r = requests.get(url, headers=headers, params=params)
    subs= r.json()["value"]
except KeyError:
    print "Error getting subscription list"
    exit("ErrorGettingSubscriptionList")
ssubs=json.dumps(subs)
if sub not in ssubs: 
    print "Could not find subscription with ID (Test 1) " + sub + " Exiting ..." 
    exit("ErrorInvalidSubscriptionID-1")

FoundSub=False
count=len(sub)
print count
for i in range(0, count):
    id=str(subs[i]["subscriptionId"])
    #print id + " " + sub
    if id == sub:
        FoundSub=True

if not FoundSub:
    print "Could not find subscription with ID (Test 2) " + sub + " Exiting ..." 
    #exit("ErrorInvalidSubscriptionID-2")


print "Found subscription " + sub + " proceeding ..."

if crg is not None:
    FoundRg=False
    # get and check Resource group
    url="https://management.azure.com/subscriptions/" + sub + "/resourceGroups"
    params = {'api-version': '2014-04-01'}
    r = requests.get(url, headers=headers, params=params)
    rgs= r.json()["value"]

    count=len(rgs)
    for j in range(0, count):    
        name=rgs[j]["name"]
        if crg.lower() == name.lower():
            print "Found Resource Group" + crg
            FoundRg=True

    if not FoundRg:
        print "Could not find Resource Group " + crg + " in subscription " + sub + " Exiting ..." 
        exit("ErrorInvalidResourceGroup")


if os.path.exists("tf-staterm.sh"):
    os.remove('tf-staterm.sh')
if os.path.exists("tf-stateimp.sh"):
    os.remove('tf-stateimp.sh')

if crf is None:
    crf="azurerm"


# record resources
azurerm_resources.azurerm_resources(crf,cde,crg,headers,requests,sub,json,az2tfmess,os)
# 001 Resource Group
azurerm_resource_group.azurerm_resource_group(crf,cde,crg,headers,requests,sub,json,az2tfmess)
# 002 management locks
azurerm_management_lock.azurerm_management_lock(crf,cde,crg,headers,requests,sub,json,az2tfmess,subprocess)
# 015 user assigned identity
azurerm_user_assigned_identity.azurerm_user_assigned_identity(crf,cde,crg,headers,requests,sub,json,az2tfmess,subprocess)
#  020 Avail Sets
azurerm_availability_set.azurerm_availability_set(crf,cde,crg,headers,requests,sub,json,az2tfmess)
#  030 Route Table
azurerm_route_table.azurerm_route_table(crf,cde,crg,headers,requests,sub,json,az2tfmess)
# 040 ASG
azurerm_application_security_group.azurerm_application_security_group(crf,cde,crg,headers,requests,sub,json,az2tfmess)
#  050 NSG's
azurerm_network_security_group.azurerm_network_security_group(crf,cde,crg,headers,requests,sub,json,az2tfmess)
#  060 Virtual Networks
azr=azurerm_virtual_network.azurerm_virtual_network(crf,cde,crg,headers,requests,sub,json,az2tfmess)
#  070 subnets
azurerm_subnet.azurerm_subnet(crf,cde,crg,headers,requests,sub,json,az2tfmess,azr)
#  080 vnet peering
azurerm_virtual_network_peering.azurerm_virtual_network_peering(crf,cde,crg,headers,requests,sub,json,az2tfmess,azr)
# 090 Key Vault - using cli
azurerm_key_vault.azurerm_key_vault(crf,cde,crg,headers,requests,sub,json,az2tfmess,subprocess)
# 100 managed disk
azurerm_managed_disk.azurerm_managed_disk(crf,cde,crg,headers,requests,sub,json,az2tfmess)
#110 storgae account
azurerm_storage_account.azurerm_storage_account(crf,cde,crg,headers,requests,sub,json,az2tfmess)
#120 public ip
azurerm_public_ip.azurerm_public_ip(crf,cde,crg,headers,requests,sub,json,az2tfmess)
#  124 Traffic manager profile
azr=azurerm_traffic_manager_profile.azurerm_traffic_manager_profile(crf,cde,crg,headers,requests,sub,json,az2tfmess)
#  125 traffic manager endpoint
azurerm_traffic_manager_endpoint.azurerm_traffic_manager_endpoint(crf,cde,crg,headers,requests,sub,json,az2tfmess,azr)
#  130 network interface
azurerm_network_interface.azurerm_network_interface(crf,cde,crg,headers,requests,sub,json,az2tfmess)
# ******************************************************************************************
exit()



